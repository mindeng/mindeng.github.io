<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>MinCodes</title><link>https://mincodes.com/</link><description>MinCodes, Minimal but useful Codes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 08 Dec 2023 16:49:00 +0800</lastBuildDate><atom:link href="https://mincodes.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Doom Emacs 的基本用法</title><link>https://mincodes.com/posts/basic-usage-of-doom-emacs/</link><pubDate>Fri, 08 Dec 2023 16:49:00 +0800</pubDate><author>Min Deng</author><guid>https://mincodes.com/posts/basic-usage-of-doom-emacs/</guid><description>安装 1 2 git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.config/emacs ~/.config/emacs/bin/doom install 环境变量 执行 doom env 命令，可以 dump 一份当前的 shell 环境变量，Doom 启动时会加载该环境变量。如果你的环境变量配置发生变化（例如</description></item><item><title>深度学习笔记：理论基础</title><link>https://mincodes.com/posts/deep-learning-notes-theory-foundation/</link><pubDate>Thu, 07 Dec 2023 08:34:00 +0000</pubDate><author>Min Deng</author><guid>https://mincodes.com/posts/deep-learning-notes-theory-foundation/</guid><description>深度学习和神经网络 深度学习是一种实现机器学习的技术，而神经网络是实现深度学习的基本结构。 具体来说： 神经网络: 神经网络是一种模仿人脑处理信息方</description></item><item><title>设计模式：行为型 (Behavioral)</title><link>https://mincodes.com/posts/design-patterns-behavioral/</link><pubDate>Fri, 07 Jul 2023 18:36:00 +0800</pubDate><author>Min Deng</author><guid>https://mincodes.com/posts/design-patterns-behavioral/</guid><description>设计模式总目录请参考：设计模式所支持的设计的可变方面。 责任链 (Chain of Responsibility) 意图 使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系</description></item><item><title>设计模式：创建型 (Creational)</title><link>https://mincodes.com/posts/design-patterns-creational/</link><pubDate>Fri, 07 Jul 2023 18:35:00 +0800</pubDate><author>Min Deng</author><guid>https://mincodes.com/posts/design-patterns-creational/</guid><description>设计模式总目录请参考：设计模式所支持的设计的可变方面。 抽象工厂 (Abstract Factory) 意图 提供一个接口以创建一系列相关或相互依赖的对象，而无须指定它们具体的类。</description></item><item><title>设计模式：结构型 (Structural)</title><link>https://mincodes.com/posts/design-patterns-structural/</link><pubDate>Fri, 07 Jul 2023 18:35:00 +0800</pubDate><author>Min Deng</author><guid>https://mincodes.com/posts/design-patterns-structural/</guid><description>设计模式总目录请参考：设计模式所支持的设计的可变方面。 适配器 (Adapter) 意图 将一个类的接口转换成客户希望的另外一个接口，使得原本不兼容的模块之间可以协</description></item><item><title>软件设计原则、设计模式总结</title><link>https://mincodes.com/posts/design-patterns/</link><pubDate>Mon, 03 Jul 2023 16:40:00 +0800</pubDate><author>Min Deng</author><guid>https://mincodes.com/posts/design-patterns/</guid><description>前言 本文是笔者对软件设计原则、设计模式的一个梳理，很多内容参考自《设计模式：可复用面向对象软件的基础》一书（尤其是设计模式部分）。其中也包含</description></item><item><title>Android 的 Binder 机制</title><link>https://mincodes.com/posts/android-binder/</link><pubDate>Sat, 01 Jul 2023 23:41:00 +0800</pubDate><author>Min Deng</author><guid>https://mincodes.com/posts/android-binder/</guid><description>同步调用 IBinder 接口相关的关键 API 主要有两个： IBinder.transact() 用来向一个 IBinder 对象发起调用请求。 Binder.onTransact() 用于处理 Binder 对象收到的调用。 请注意，这套 transaction API 是一套 同步 API, 即一个 transact() 调用会</description></item><item><title>动态绑定（Dynamic Binding）和词法绑定（Lexical Binding）</title><link>https://mincodes.com/posts/dynamic-lexical-binding-in-elisp/</link><pubDate>Mon, 26 Jun 2023 14:42:00 +0800</pubDate><author>Min Deng</author><guid>https://mincodes.com/posts/dynamic-lexical-binding-in-elisp/</guid><description>今天读了一篇讲 dynamic binding 和 lexical binding 的文章： Dynamic Binding Vs Lexical Binding，讲的挺清楚的，这里大致翻译如下。 绑定 binding 的概念 绑定是名字和值的一种对应关系。在 Lisp 中，可</description></item><item><title>Bash: set 命令用法介绍</title><link>https://mincodes.com/posts/bash-set/</link><pubDate>Mon, 26 Jun 2023 12:49:00 +0800</pubDate><author>Min Deng</author><guid>https://mincodes.com/posts/bash-set/</guid><description>Bash 在执行脚本的时候，会创建一个新的 shell, 每个 shell 都有自己独立的执行环境，这个环境会有一些默认行为，而这些默认行为可以通过 set 命令来修改。 这里介绍几种</description></item><item><title>用 Emacs 分析日志文件</title><link>https://mincodes.com/posts/use-emacs-to-analyse-log-files/</link><pubDate>Tue, 14 Mar 2023 11:47:00 +0000</pubDate><author>Min Deng</author><guid>https://mincodes.com/posts/use-emacs-to-analyse-log-files/</guid><description>日常开发工作中，经常会需要分析日志文件，有一件趁手的工具会高效很多。 Emacs 正是这样一个工具。 Vim 也有类似的功能（参考 Vim Tips），但就分析日志来说</description></item></channel></rss>