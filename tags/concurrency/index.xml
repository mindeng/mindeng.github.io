<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Concurrency - 标签 - MinCodes</title><link>https://mincodes.com/tags/concurrency/</link><description>Concurrency - 标签 - MinCodes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 11 Mar 2022 00:00:00 +0800</lastBuildDate><atom:link href="https://mincodes.com/tags/concurrency/" rel="self" type="application/rss+xml"/><item><title>Go 并发模式总结</title><link>https://mincodes.com/posts/go-concurrency-patterns/</link><pubDate>Fri, 11 Mar 2022 00:00:00 +0800</pubDate><author>Min Deng</author><guid>https://mincodes.com/posts/go-concurrency-patterns/</guid><description>Go 的并发哲学 Don&amp;rsquo;t Communicate by sharing memory, share memory by communicating. 不要通过共享内存来通信；相反，通过通信来共享内存。 Generator 发生器 Generator 指返回一个 chan 的函数。这是一种十分常见的使用 goroutine + chan 的</description></item></channel></rss>