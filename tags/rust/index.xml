<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Rust - 标签 - MinCodes</title><link>https://mincodes.com/tags/rust/</link><description>Rust - 标签 - MinCodes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 19 Mar 2024 11:54:00 +0800</lastBuildDate><atom:link href="https://mincodes.com/tags/rust/" rel="self" type="application/rss+xml"/><item><title>Rust 中的 Pin, Unpin 和 !Unpin</title><link>https://mincodes.com/posts/pin-unpin-in-rust/</link><pubDate>Tue, 19 Mar 2024 11:54:00 +0800</pubDate><author>Min Deng</author><guid>https://mincodes.com/posts/pin-unpin-in-rust/</guid><description>为什么需要 Pin? 引入 Pin 的目的主要是为了支持 自引用类型 (self-referential types) 。下面我们以 Future 为例，解释一下自引用类型以及引入 Pin 的必要性。 由于异步函数中可能包含对局部变</description></item><item><title>理解 Rust 的 生命周期 (Lifetime)</title><link>https://mincodes.com/posts/understanding-lifetimes-in-rust/</link><pubDate>Wed, 06 Mar 2024 16:01:00 +0800</pubDate><author>Min Deng</author><guid>https://mincodes.com/posts/understanding-lifetimes-in-rust/</guid><description>Lifetime 的主要目的是防止悬空引用 (dangling references) 下面的例子中， borrow checker 会检查 r 的生命周期 'a 比其引用的数据的生命周期 'b 要长，因此会拒绝编译通过。 1 2 3 4 5 6 7 8 9 10</description></item><item><title>Rust 的 move 和 C++ 的 std::move</title><link>https://mincodes.com/posts/move-in-rust-and-cpp/</link><pubDate>Wed, 06 Mar 2024 12:19:00 +0800</pubDate><author>Min Deng</author><guid>https://mincodes.com/posts/move-in-rust-and-cpp/</guid><description>Rust 的 move 和 C++ 的 std::move 在表面上看有些相似之处，因为它们都涉及到数据或资源的转移。然而，它们在设计理念、实现方式以及它们在各自语言中所扮演的角色上有着</description></item><item><title>发布我的第一个 Crate: django-auth</title><link>https://mincodes.com/posts/publish-crate-django-auth/</link><pubDate>Sun, 14 Jan 2024 19:37:00 +0800</pubDate><author>Min Deng</author><guid>https://mincodes.com/posts/publish-crate-django-auth/</guid><description>今天发布了我的第一个 crate: django-auth, 虽然是一个非常简单的 crate, 但麻雀虽小，五脏俱全，API 文档、测试用例、doc test 等一个都不能少 😎。 先简单介绍一下这个库，然</description></item><item><title>Rust 中的特征 (Trait)</title><link>https://mincodes.com/posts/traits-in-rust/</link><pubDate>Tue, 19 Dec 2023 20:46:00 +0800</pubDate><author>Min Deng</author><guid>https://mincodes.com/posts/traits-in-rust/</guid><description>概述 简单来说， trait 是 Rust 中用来定义共享行为的抽象机制，和 Java 的 interface、 Swift 的 protocol 有点类似： 1 2 3 pub trait Summary { fn summarize(&amp;amp;self) -&amp;gt; String; } 单纯从提供的功能和灵活性</description></item><item><title>Rust 中的 | (竖线) 符号</title><link>https://mincodes.com/posts/rust-vertical-line/</link><pubDate>Mon, 18 Dec 2023 21:20:00 +0800</pubDate><author>Min Deng</author><guid>https://mincodes.com/posts/rust-vertical-line/</guid><description>Rust 中的 | 用途比较多，这里做一个简单的整理。 模式匹配中的“或”模式 (Pattern Alternatives) 在模式匹配（如 match 语句或 if let 表达式）中， | 可以用来表示多个模式的组合： 1 2</description></item></channel></rss>