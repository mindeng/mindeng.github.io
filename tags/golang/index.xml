<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Golang - 标签 - MinCodes</title><link>https://mincodes.com/tags/golang/</link><description>Golang - 标签 - MinCodes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 22 Feb 2023 03:15:00 +0000</lastBuildDate><atom:link href="https://mincodes.com/tags/golang/" rel="self" type="application/rss+xml"/><item><title>经历八年后，我是如何用 Go 写 HTTP 服务的</title><link>https://mincodes.com/posts/how-i-write-http-services-in-go/</link><pubDate>Wed, 22 Feb 2023 03:15:00 +0000</pubDate><author>Min Deng</author><guid>https://mincodes.com/posts/how-i-write-http-services-in-go/</guid><description>今天读到一篇不错的文章，讲如何用 Go 写 HTTP 服务的，很有同感，翻译如下。 原文链接 A Server struct 一个 Server struct 是一个代表服务的对象，持有所有依赖。 每个组件都有一个</description></item><item><title>Go 并发模式总结</title><link>https://mincodes.com/posts/go-concurrency-patterns/</link><pubDate>Fri, 11 Mar 2022 00:00:00 +0800</pubDate><author>Min Deng</author><guid>https://mincodes.com/posts/go-concurrency-patterns/</guid><description>Go 的并发哲学 Don&amp;rsquo;t Communicate by sharing memory, share memory by communicating. 不要通过共享内存来通信；相反，通过通信来共享内存。 Generator 发生器 Generator 指返回一个 chan 的函数。这是一种十分常见的使用 goroutine + chan 的</description></item></channel></rss>