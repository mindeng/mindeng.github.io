<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>architecture - 标签 - MinCodes</title><link>https://mincodes.com/tags/architecture/</link><description>architecture - 标签 - MinCodes</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 07 Jul 2023 18:36:00 +0800</lastBuildDate><atom:link href="https://mincodes.com/tags/architecture/" rel="self" type="application/rss+xml"/><item><title>设计模式：行为型 (Behavioral)</title><link>https://mincodes.com/posts/design-patterns-behavioral/</link><pubDate>Fri, 07 Jul 2023 18:36:00 +0800</pubDate><author>Min Deng</author><guid>https://mincodes.com/posts/design-patterns-behavioral/</guid><description>设计模式总目录请参考：设计模式所支持的设计的可变方面。 责任链 (Chain of Responsibility) 意图 使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系</description></item><item><title>设计模式：创建型 (Creational)</title><link>https://mincodes.com/posts/design-patterns-creational/</link><pubDate>Fri, 07 Jul 2023 18:35:00 +0800</pubDate><author>Min Deng</author><guid>https://mincodes.com/posts/design-patterns-creational/</guid><description>设计模式总目录请参考：设计模式所支持的设计的可变方面。 抽象工厂 (Abstract Factory) 意图 提供一个接口以创建一系列相关或相互依赖的对象，而无须指定它们具体的类。</description></item><item><title>设计模式：结构型 (Structural)</title><link>https://mincodes.com/posts/design-patterns-structural/</link><pubDate>Fri, 07 Jul 2023 18:35:00 +0800</pubDate><author>Min Deng</author><guid>https://mincodes.com/posts/design-patterns-structural/</guid><description>设计模式总目录请参考：设计模式所支持的设计的可变方面。 适配器 (Adapter) 意图 将一个类的接口转换成客户希望的另外一个接口，使得原本不兼容的模块之间可以协</description></item><item><title>软件设计原则、设计模式总结</title><link>https://mincodes.com/posts/design-patterns/</link><pubDate>Mon, 03 Jul 2023 16:40:00 +0800</pubDate><author>Min Deng</author><guid>https://mincodes.com/posts/design-patterns/</guid><description>前言 本文是笔者对软件设计原则、设计模式的一个梳理，很多内容参考自《设计模式：可复用面向对象软件的基础》一书（尤其是设计模式部分）。其中也包含</description></item></channel></rss>