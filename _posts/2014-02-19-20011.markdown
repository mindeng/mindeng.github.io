---
layout: post
title:  "quick sort"
date:   2014-02-19 14:55:25
tags:   [algorithm, c]
---

Java version:

```java
public class Test {

	public static void main(String[] args) {
		int n[] = { 6, 5, 2, 7, 3, 9, 8, 4, 10, 1 };
		quicksort(n);
		for (int m : n) {
			System.out.print(m + " ");
		}
	}

	public static void quicksort(int n[]) {
		sort(n, 0, n.length - 1);
	}

	public static void sort(int n[], int l, int r) {
		if (l < r) {
			// 一趟快排，并返回交换后基数的下标
			int index = patition(n, l, r);
			// 递归排序基数左边的数组
			sort(n, l, index - 1);
			// 递归排序基数右边的数组
			sort(n, index + 1, r);
		}

	}

	public static int patition(int n[], int l, int r) {
		// p为基数，即待排序数组的第一个数
		int p = n[l];
		int i = l;
		int j = r;
		while (i < j) {
			// 从右往左找第一个小于基数的数
			while (n[j] >= p && i < j) {
				j--;
			}
			// 从左往右找第一个大于基数的数
			while (n[i] <= p && i < j) {
				i++;
			}
			// 找到后交换两个数
			swap(n, i, j);
		}
		// 使划分好的数分布在基数两侧
		swap(n, l, i);
		return i;
	}

	private static void swap(int n[], int i, int j) {
		int temp = n[i];
		n[i] = n[j];
		n[j] = temp;
	}

}
```

C:

```c
void swap(int *a, int *b)
{
    int tmp = *a;
    *a = *b;
    *b = tmp;
}

void qsort(int a[], int left, int right)
{
    if (left >= right) return;

    int pivot = a[left];
    int i = left + 1;
    int j = right;

    // partition a to two sub-lists
    while (1) {
        while (a[i] <= pivot && i <= right) ++i;
        while (a[j] > pivot && j > i) --j;
        if (i < j) {
            swap(&a[i], &a[j]);
        }
        else {
            swap(&a[left], &a[i-1]);
            break;
        }
    }

    qsort(a, left, i-2);
    qsort(a, i, right);
}
```
